#!/bin/bash
#
# git-trimbranches
# See README.markdown for information about this script.

function echo_in_bold_and_run {
  printf "\033[1m%s\033[0m\n" "$1"
  return_value=$(eval "$1 2>&1")
}

function local_branch_exists {
  git branch | grep "$1" > /dev/null
  return $?
}


echo_in_bold_and_run 'git fetch'

echo_in_bold_and_run 'git config --get branch.master.remote'
remote="$return_value"

echo_in_bold_and_run "git remote prune $remote"

echo_in_bold_and_run "git branch -r --merged $remote/master | grep '^  $remote/' | egrep -v 'master|staging|production|stable'"
remote_branches="$return_value"
merged_remote_branch_count=$(echo "$remote_branches" | wc -w | sed 's/ //g')
echo "Found $merged_remote_branch_count branches on $remote which are already contained in $remote/master."
echo

for branch in $remote_branches; do
  sha=$(git rev-parse --short "$branch")
  branch_without_remote_prefix=$(echo "$branch" | sed "s/^$remote\/\(.*\)/\1/")
  echo_in_bold_and_run "git push $remote :$branch_without_remote_prefix"
  echo "$return_value (was $sha)"
  if local_branch_exists $branch_without_remote_prefix; then
    echo_in_bold_and_run "git branch -d $branch_without_remote_prefix"
    echo "$return_value"
  fi
done
